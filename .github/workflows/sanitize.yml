# author: jgp
name: SPH-EXA Sanitize

on: push
# on: [push, pull_request]
#  push:
#    branches: [ develop ]
#  pull_request:
#    branches: [ develop ]

jobs:
  build:
    name: "Sanitize"
    runs-on: ${{ matrix.os }}
    # {{{ config matrix
    strategy:
      fail-fast: false
      matrix:
        name: ["Ubuntu & clang++-10"]
        os: ["ubuntu-20.04"]
        cxx: ["clang++-10"]
        sanitizer: ["address", "leak"]
        mpi: ["ON"]
        # sanitizer: ["address", "leak", "undefined", "memory", "thread"]
#         - {
#             name:  "Ubuntu & clang++-11",
#             os:    "ubuntu-20.04",
#             cxx:   "clang++-11",
#           }
    # }}}

    # {{{ env
    env:        
        CXX: ${{ matrix.cxx }}
        TZ: Europe/Zurich
        DEBIAN_FRONTEND: noninteractive
        # CMake build type here (Release, Debug, RelWithDebInfo, etc.)
        BUILD_TYPE: Debug
    # }}}

    steps:
      - uses: actions/checkout@v2
        # with:
        #   submodules: recursive

      # {{{ deps
      - name: setup cmake
        uses: jwlawson/actions-setup-cmake@v1.9
        with:
          cmake-version: ${{ matrix.cmake }}

      - name: check config
        run: |
          # dpkg -l
          # cat /etc/issue
          $CXX --version
          cmake --version

#       - name: install ReFrame
#         # if: ${{ startsWith(matrix.os, 'ubuntu') }}
#         run: |
#           sudo apt update
#           # sudo apt -y upgrade
#           sudo apt -y --no-install-recommends install python3-pip
#           python3 -m pip install -U pip
#           python3 -m pip install setuptools requests ReFrame-HPC
#           reframe --version
      # }}}

      # {{{ mpich + clang++-11
      - name: mpich & clang++-11
        run: |
          cd
          # mpich:
          sudo apt update
          sudo apt install --no-install-recommends -y gnupg wget \
          software-properties-common mpich libmpich-dev 
          # clang++-11:
          wget https://apt.llvm.org/llvm-snapshot.gpg.key # --no-check-certificate
          sudo apt-key add llvm-snapshot.gpg.key
          sudo apt-add-repository 'deb http://apt.llvm.org/buster/ llvm-toolchain-buster-11 main' #11
          sudo apt update
          sudo apt upgrade
          sudo apt install -y clang-11
          # wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key |apt-key add -
          # apt install software-properties-common
          # check:
          MPICH_CXX=clang++-11 mpicxx --version
          cd -
          # sudo apt install --no-install-recommends -y git
          # cd
          # git clone https://github.com/unibas-dmi-hpc/SPH-EXA_mini-app.git
          # cd SPH-EXA_mini-app
      # }}}

      # {{{ OpenMPI
#       - name: OpenMPI cache
#         uses: actions/cache@v2
#         id:   cache-openmpi
#         with:
#           path: ~/openmpi-4.0.6
#           key:  ${{ matrix.os }}-openmpi-4.0.6-${{ matrix.cxx }}
# 
#       - name: Build OpenMPI
#         if: ${{ steps.cache-openmpi.outputs.cache-hit != 'true' }}
#         run: |
#            echo cache-hit='${{ steps.cache-openmpi.outputs.cache-hit }}'
#            cd
#            wget https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.6.tar.gz
#            tar xvf openmpi-4.0.6.tar.gz
#            cd openmpi-4.0.6
#            ./configure --disable-mpi-fortran
#            make -j5
# 
#       - name: Install OpenMPI
#         run: |
#            echo "Installing openmpi"
#            cd
#            cd openmpi-4.0.2
#            sudo make install
#            cd -
# 
#       - name: Update shared library cache
#         if: ${{ startsWith(matrix.os, 'ubuntu') }}
#         run: sudo ldconfig
      # }}}

      # {{{ build SPH test
      - name: build the SPH test
        run: |
          # mkdir -p build_
          # cd build_
          cmake -B build_ \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_CXX_COMPILER=${{env.CXX}} \
          -DCMAKE_CXX_FLAGS="-fsanitize=${{ matrix.sanitizer }} -fno-omit-frame-pointer" \
          -DCMAKE_EXE_LINKER_FLAGS=-fsanitize=${{ matrix.sanitizer }}
          cd build_
          make -j VERBOSE=1 sedov
          find . -name sedov
          # ./domain/test/unit/component_units
          # pwd
          # ls -la
      # }}}

       # {{{ run
      - if:   ${{ matrix.mpi == 'ON' }}
        name: Run MPI test
        run:  mpirun -np 2 ${{ github.workspace }}/build_/src/sedov/sedov -s 0 -n 30

#       - name: run the test
#         working-directory: ${{github.workspace}}/build_
#         env:
#           MYEXE: ${{ github.workspace }}/build_/src/sedov/sedov
#           # MYEXE: ${{ github.workspace }}/build_/domain/test/unit/component_units
#         run: |
#           reframe -c ../.github/workflows/reframe_unittest.py -r --keep-stage-files
#
#       - name: check the unittest
#         working-directory: ${{github.workspace}}/build_
#         run: cat stage/generic/default/builtin/SPHEXA_Unit_Test/*
      # }}}
