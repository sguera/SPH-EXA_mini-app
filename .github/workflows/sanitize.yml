# author: jgp
name: SPH-EXA Sanitize

on: push
# on: [push, pull_request]
#  push:
#    branches: [ develop ]
#  pull_request:
#    branches: [ develop ]

jobs:
  build:
    name: "Sanitize"
    runs-on: ${{ matrix.os }}
    # {{{ config matrix
    strategy:
      fail-fast: false
      matrix:
        name:  "Ubuntu & clang++-10 (${{ matrix.sanitizer }})"
        os:    "ubuntu-20.04"
        cxx:   "clang++-10"
        sanitizer: ["leak"]
        # sanitizer: ["address", "leak", "undefined", "memory", "thread"]
#         - {
#             name:  "Ubuntu & clang++-11",
#             os:    "ubuntu-20.04",
#             cxx:   "clang++-11",
#           }
    # }}}

    # {{{ env
    env:        
        CXX: ${{ matrix.cxx }}
        TZ: Europe/Zurich
        DEBIAN_FRONTEND: noninteractive
        # CMake build type here (Release, Debug, RelWithDebInfo, etc.)
        BUILD_TYPE: Debug
    # }}}

    steps:
      - uses: actions/checkout@v2
        # with:
        #   submodules: recursive

      # {{{ deps
      - name: setup cmake
        uses: jwlawson/actions-setup-cmake@v1.9
        with:
          cmake-version: ${{ matrix.cmake }}

      - name: check config
        run: |
          # dpkg -l
          # cat /etc/issue
          $CXX --version
          cmake --version

      - name: install ReFrame
        # if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          sudo apt update
          # sudo apt -y upgrade
          sudo apt -y --no-install-recommends install python3-pip
          python3 -m pip install -U pip
          python3 -m pip install setuptools requests ReFrame-HPC
          reframe --version
      # }}}

      # {{{ build
      - name: build the unittest
        run: |
          # mkdir -p build_
          # cd build_
          cmake -B build_ \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_CXX_COMPILER=${{env.CXX}} \
          -DCMAKE_CXX_FLAGS="-fsanitize=${{ matrix.sanitizer }} -fno-omit-frame-pointer" \
          -DCMAKE_EXE_LINKER_FLAGS=-fsanitize=${{ matrix.sanitizer }}
          cd build_
          make -j component_units
          find . -name component_units
          # ./domain/test/unit/component_units
          # pwd
          # ls -la
      # }}}

      # {{{ run
      - name: run the unittest
        working-directory: ${{github.workspace}}/build_
        env:
          MYEXE: ${{ github.workspace }}/build_/domain/test/unit/component_units
        run: |
          reframe -c ../.github/workflows/reframe_unittest.py -r --keep-stage-files
      - name: check the unittest
        working-directory: ${{github.workspace}}/build_
        run: cat stage/generic/default/builtin/SPHEXA_Unit_Test/*
      # }}}
